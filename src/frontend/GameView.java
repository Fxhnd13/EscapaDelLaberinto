/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import backend.objects.cells.Cell;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Soberanis
 */
public class GameView extends javax.swing.JFrame {

    /**
     * Creates new form GameView
     */
    private final int VISION_RANGE = 7;
    private GameViewController gameController;
    
    public GameView() {
        initComponents();
        this.gameController = new GameViewController();
        this.doGridLayout();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapSelectorDialog = new javax.swing.JDialog();
        mapSelectorComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        mapPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        pickGoldButton = new javax.swing.JButton();
        outButton = new javax.swing.JButton();
        goldRequiredButton = new javax.swing.JButton();
        inputText = new javax.swing.JTextField();
        linternCheckbox = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        mapSelectorDialog.setTitle("Seleccion de mapa");
        mapSelectorDialog.setSize(new java.awt.Dimension(350, 100));

        jButton1.setText("Seleccionar mapa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mapSelectorDialogLayout = new javax.swing.GroupLayout(mapSelectorDialog.getContentPane());
        mapSelectorDialog.getContentPane().setLayout(mapSelectorDialogLayout);
        mapSelectorDialogLayout.setHorizontalGroup(
            mapSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapSelectorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapSelectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mapSelectorDialogLayout.setVerticalGroup(
            mapSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapSelectorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mapSelectorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mapSelectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mapPanel.setPreferredSize(new java.awt.Dimension(518, 518));

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
        );

        pickGoldButton.setText("Levantar oro");
        pickGoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickGoldButtonActionPerformed(evt);
            }
        });

        outButton.setText("Salir");
        outButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outButtonActionPerformed(evt);
            }
        });

        goldRequiredButton.setText("Oro requerido");
        goldRequiredButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goldRequiredButtonActionPerformed(evt);
            }
        });

        inputText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputTextKeyPressed(evt);
            }
        });

        linternCheckbox.setText("Activar linterna");
        linternCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linternCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputText)
                    .addComponent(goldRequiredButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pickGoldButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(linternCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pickGoldButton)
                .addGap(18, 18, 18)
                .addComponent(outButton)
                .addGap(18, 18, 18)
                .addComponent(goldRequiredButton)
                .addGap(18, 18, 18)
                .addComponent(inputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(linternCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Opciones");

        jMenuItem2.setText("Nuevo juego");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Cargar mapa");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.mapSelectorDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void linternCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linternCheckboxActionPerformed
        if(this.gameController.isInActiveGame()){
            this.paintMap();
        }else{
            showInactiveGameMessage();
            this.linternCheckbox.setSelected(!this.linternCheckbox.isSelected());
        }
    }//GEN-LAST:event_linternCheckboxActionPerformed

    private void inputTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextKeyPressed
        //keyPressedArea.setText(keyPressedArea.getText()+"\n"+evt.getKeyCode());
        if(this.gameController.isInActiveGame()){
            this.gameController.movePlayer(evt.getKeyCode());
            this.paintMap();
        }else{
            showInactiveGameMessage();
        }
        this.inputText.setText("");
    }//GEN-LAST:event_inputTextKeyPressed

    private void pickGoldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickGoldButtonActionPerformed
        if(this.gameController.isInActiveGame()){
            this.gameController.pickUpGold();
            verifyErrors();
        }else{
            showInactiveGameMessage();
        }
    }//GEN-LAST:event_pickGoldButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.gameController.createNewMap(mapSelectorComboBox);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(mapSelectorComboBox.getSelectedIndex()!= -1){
            this.gameController.selectMap(mapSelectorComboBox.getSelectedIndex());
            this.paintMap();
        }else{
            JOptionPane.showMessageDialog(null, "No se seleccionó un mapa valido", "Error", JOptionPane.ERROR_MESSAGE);
        }
        this.mapSelectorDialog.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void outButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outButtonActionPerformed
        if(this.gameController.isInActiveGame()){
            boolean requiredGold = this.gameController.exitMap();
            if(requiredGold){
                JOptionPane.showMessageDialog(null, "Felicidades, has completado el juego","Fin", JOptionPane.INFORMATION_MESSAGE);
                this.gameController.getActiveGame().showPlayerStatistic();
                this.gameController.finishGame();
            }else{
                JOptionPane.showMessageDialog(null, "No posees el oro suficiente para finalizar el juego","Información", JOptionPane.INFORMATION_MESSAGE);
            }
            if(this.gameController.isInActiveGame()) verifyErrors();
        }else{
            showInactiveGameMessage();
        }
    }//GEN-LAST:event_outButtonActionPerformed

    private void goldRequiredButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goldRequiredButtonActionPerformed
        if(this.gameController.isInActiveGame()){
            int requiredGold = this.gameController.goldRequired();
            if(requiredGold != -1){
                JOptionPane.showMessageDialog(null, "Se necesita una cantidad de: "+requiredGold+" oro para escapar del laberinto", "Oro requerido", JOptionPane.INFORMATION_MESSAGE);
            }
            verifyErrors();
        }else{
            showInactiveGameMessage();
        }
    }//GEN-LAST:event_goldRequiredButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameView().setVisible(true);
            }
        });
    }
    
    //-------------------------------------------------METODOS PROPIOS-------------------------------------------------------
    
    private void paintMap(){
        ArrayList<Cell> cellsToPaint = this.gameController.getActiveGame().getMap().getSurroundedCells(VISION_RANGE, this.linternCheckbox.isSelected());
        for (int i = 0; i < cellsToPaint.size(); i++) {
            cellsToPaint.get(i).setImage(this.linternCheckbox.isSelected(), (JLabel)this.mapPanel.getComponent(i));
        }
        System.out.println(this.gameController.getActiveGame().toString());
    }
    
    private void verifyErrors(){
        if(this.gameController.verifyErrors()){
            JOptionPane.showMessageDialog(null, "El juego ha terminado, has ingresado muchos comandos incorrectos","Fin",JOptionPane.INFORMATION_MESSAGE);
            this.gameController.finishGame();
        }
    }
    
    private void showInactiveGameMessage() {
        JOptionPane.showMessageDialog(null,"No se encuentra en una partida activa","Error",JOptionPane.ERROR_MESSAGE);
    }
    
    private void doGridLayout(){
        this.mapPanel.setLayout(new GridLayout(VISION_RANGE, VISION_RANGE));
        int height = mapPanel.getHeight()/VISION_RANGE;
        int width = mapPanel.getWidth()/VISION_RANGE;
        for (int i = 0; i < (VISION_RANGE*VISION_RANGE); i++) {
            JLabel newLabel = new JLabel();
            newLabel.setSize(width, height);
            mapPanel.add(newLabel);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goldRequiredButton;
    private javax.swing.JTextField inputText;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox linternCheckbox;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JComboBox<String> mapSelectorComboBox;
    private javax.swing.JDialog mapSelectorDialog;
    private javax.swing.JButton outButton;
    private javax.swing.JButton pickGoldButton;
    // End of variables declaration//GEN-END:variables

}
